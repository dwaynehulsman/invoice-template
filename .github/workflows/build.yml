name: Build Electron App

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            arch: x64
          - os: windows-latest
            platform: win
            arch: x64
          - os: macos-latest
            platform: mac
            arch: x64
          - os: macos-latest
            platform: mac
            arch: arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Clear npm cache and reinstall (macOS fix)
        if: matrix.platform == 'mac'
        run: |
          rm -rf node_modules package-lock.json
          npm cache clean --force
          npm install

      - name: Install dependencies
        if: matrix.platform != 'mac'
        run: npm ci

      - name: Build for Linux
        if: matrix.platform == 'linux'
        run: npm run electron:dist:linux

      - name: Build for Windows
        if: matrix.platform == 'win'
        run: npm run electron:dist:win

      - name: Build for macOS x64
        if: matrix.platform == 'mac' && matrix.arch == 'x64'
        run: npm run electron:dist:mac
        env:
          CSC_IDENTITY_AUTO_DISCOVERY: false

      - name: Build for macOS ARM64
        if: matrix.platform == 'mac' && matrix.arch == 'arm64'
        run: npm run build && npx electron-builder --mac --arm64 --publish=never
        env:
          CSC_IDENTITY_AUTO_DISCOVERY: false

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: invoice-creator-${{ matrix.platform }}-${{ matrix.arch }}
          path: |
            dist-electron/*.exe
            dist-electron/*.dmg
            dist-electron/*.zip
            dist-electron/*.AppImage
            dist-electron/*.deb
          retention-days: 30

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            **/*.exe
            **/*.dmg
            **/*.zip
            **/*.AppImage
            **/*.deb
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
